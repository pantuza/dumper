#!/bin/bash

#######################################################################
# Bash script that make mysql dump files comes from a database server #
# to a development enviroment                                         #
#                                                                     #
# This script is a model that you setup it defining the variables in  #
# the begining of the file.                                           #
#                                                                     #
# You can put this script at /usr/bin/ and set execution bit to the   #
# file                                                                #
#                                                                     #
# Author : Gustavo Pantuza                                            #
# Since  : 07.02.2012                                                 #
#######################################################################

version="1.0";
# == VARIABLES DEFINITIONS == #

# server dns or ip to connect over ssh
server=""; # ex: my_db_server.com

# ssh user that have permission to execute mysqldump program on the server
ssh_user=""; # ex: dennis

# database user
db_user="" # ex: dba

# database password
db_pass=""; # ex: dba_passwd

# receives the database/table name from command arguments
database=""; 
tables="";


# == FUNCTIONS AREA == #

# make a backup of the last dump created inside the user home 
# directory. ex : /home/user_home_dir/dumps/
function backup ()
{
    # if dumps dir doesn't exists, creates
	if [ ! -e $HOME/dumps ]; then
		mkdir $HOME/dumps;
	fi;

	dumpdir=$HOME/dumps;

    # if exist a dump file, back it up
	if [ -f $dumpdir/dump ];then
		mv $dumpdir/dump $dumpdir/dump_;
	fi;
}


# run the mysql dump on the server, archive the dump file (tar), then
# copies the file to the dump directory and unarchive it
function cpdump ()
{
    if [ "$tables" == "" ]; then
        tables_opt="";
    else
        tables_opt="--tables";
    fi;
    ssh $ssh_user@$server "mysqldump -u$db_user -p$db_pass $database \
        $tables_opt $tables > /tmp/dump;cd /tmp; tar czf - dump" \
        | tar xzf - -C $HOME/dumps/;
}


# Imports the dump file to the database on the development enviroment
function impdump ()
{
	mysql -u$db_user -p$db_pass $database < $HOME/dumps/dump
}

# prints the help message
function usage ()
{
    echo -e "\nUsage: $1 database_name [table_name1 [,table_name2, ...] ]\n";
}

# version information
function version ()
{
    echo -e "$1 - $version";
}
# help function
function help ()
{
    usage $1;
    version $1;
    echo -e "
    Dump databases and tables on a server and import it 
    backup file to the local database

    Options
    \t-v, --version
    \t\tPrints the script version
    \t-h, --help
    \t\tPrints this help message

    Written By
    \tGustavo Pantuza
    Report Bugs To
    \tgustavopantuza@gmail.com
    ";
}

# parses database and tables
function parsedata()
{
    if test -n "$database"; then
        tables="${tables}${1/ /}";
    else
        database="$1";
    fi;
}

# parses the dumper arguments
function parseargs ()
{
    # tests if the length of the string is nonzero
    if test -n "$2"; then
        case "$2" in
            -h|--help)
                help $1;
                exit
                ;;
            -v|--version)
                version $1;
                exit;
                ;;
            -*|--*)
                echo -e "Error: ";
                help $1;
                exit
                ;;
            *)
                while test -n "$2";do
                    parsedata $2;
                    shift
               done
               ;;
        esac
    else
        usage $1;
        exit 1
    fi;
    echo -e "database: $database \ntables: $tables";
    exit 2;
}

# Main function that controls the script execution flow
function main()
{
    parseargs $0 $@;
    echo -e "making dump file backup..."
    backup;
	echo -e "OK";
    echo -e "making dump on server..."
	cpdump;
    echo -e "Ok";
	echo -e "updating the database..."
    impdump;
    echo -e "OK";
	echo -e "\n\n--\nDatabase updated successfully! Good work o/ \n";
	exit 0;
}	

# Run the main function :)
main $@

