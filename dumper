#!/bin/bash

#######################################################################
# Bash script that make mysql dump files comes from a database server #
# to a development enviroment                                         #
#                                                                     #
# This script is a model that you setup it defining the variables in  #
# the begining of this file.                                          #
#                                                                     #
# You can put this script at /usr/bin/ and set execution bit to the   #
# file                                                                #
#                                                                     #
# Author : Gustavo Pantuza                                            #
# Since  : 07.02.2012                                                 #
#######################################################################

# == VARIABLES DEFINITIONS == #


# server dns or ip to connect over ssh
server=""; # ex: my_db_server.com

# ssh user that have permission to execute mysqldump program on the server
ssh_user=""; # ex: dennis

# database user
db_user="" # ex: dba

# database password
db_pass=""; # ex: dba_passwd



# == FUNCTIONS AREA == #

# make a backup of the last dump created inside the user home 
# directory. ex : /home/user_home_dir/dumps/
function backup ()
{
    # if dumps dir doesn't exists, creates
	if [ ! -e "$HOME/dumps" ]; then
		mkdir "$HOME/dumps";
	fi;

	dumpdir="$HOME/dumps";

    # if exist a dump file, back it up
	if [ -f "$dumpdir/dump" ];then
		mv "$dumpdir/dump" "$dumpdir/dump_";
	fi;
}


# run the mysql dump on the server, archive the dump file (tar), then
# copies the file to the home dump directory and unarchive it
function cpdump ()
{
    if [ -z $tables ]; then
        tables_opt="--tables";
    else
        tables_opt="";
    fi;
    ssh $ssh_user@$server "mysqldump -u$db_user -p$db_pass $database \
        $tables_opt $tables > /tmp/dump;cd /tmp; tar czf - dump" \
        | tar xzf - -C "$HOME/dumps/";
}


# Imports the dump file to the database on the development enviroment
function impdump ()
{
	mysql -u$db_user -p$db_pass $database < "$HOME/dumps/dump"
}

# prints the Usage message
function usage ()
{
    echo -e "\n\e[0;33mUsage: $script_name database_name " \
            "[table_name1 [,table_name2, ...] ]\e[0m\n";
}

# version information
function version ()
{
    echo -e "\e[0;34m${script_name^^} - $version\e[0m";
}
# help function
function help ()
{
    usage $script_name;
    version $script_name;
    echo -e "\e[0;33m
    Dump databases and tables from a server and import its 
    backup file to the local database

    \e[0;34mOptions\e[0;33m
    \t-v, --version
    \t\tPrints the script version
    \t-h, --help
    \t\tPrints this help message

    \e[0;34mExample\e[0;33m
    \tdumper mydatabase mytable1,mytable2

    \e[0;34mWritten By\e[0;33m
    \tGustavo Pantuza
    \e[0;34mReport Bugs To\e[0;33m
    \tgustavopantuza@gmail.com
    \e[0m";
}

# parses database and tables
function parsedata()
{
    if test -n "$database"; then
        tables="${tables}${1/ /}";
    else
        database="$1";
    fi;
}

# parses the dumper arguments
function parseargs ()
{
    script_name=$0;
   
    # print script usage when arguments are not passed
    if test ! -n "$1"; then
        usage $script_name;
        exit;
    fi;

    # tests if the length of the string is nonzero
    while test -n "$1"; do

        # call functions depending of the argv
        case "$1" in
            -h|--help)
                help $script_name;
                exit
                ;;
            -v|--version)
                version $script_name;
                exit;
                ;;
            --server)
                shift;
                server="$1";
                shift;
                ;;
            --ssh-user)
                shift;
                ssh_user="$1";
                shift;
                ;;
            --db-user)
                shift;
                db_user="$1";
                shift;
                ;;
            --db-pass)
                shift;
                db_pass="$1";
                shift;
                ;;
            -*|--*)
                echo -e "\n\e[0;31mError: bad arguments\e[0m\n--";
                usage $script_name;
                exit
                ;;
            *)
                parsedata $1;
                shift
                ;;
        esac;        
    done;
}

# Canceling script function
function dumper_cancel()
{
    echo -e "\n\e[0;31mDumper script aborted!\e[0m\n" 
    exit 1;
}

# Verify the necessary variable to the script execution
function verify_confs()
{
    if [ -z $server ] && [ -z $ssh_user ] \
        && [ -z $db_user ] && [ -z $db_pass ]; then

        echo -e "\nBad file configuration. Missing setup variables";
        dumper_cancel;
    fi;
}

# Main function that controls the script execution flow
function main()
{
    parseargs $@;
    verify_confs;
    echo -e "making dump file backup..."
    backup;
	echo -e "OK";
    echo -e "making dump on $server..."
	cpdump;
    echo -e "Ok";
	echo -e "updating $database database..."
    impdump;
    echo -e "OK";
    echo -e "\n\n--\nDatabase updated successfully!" \
            " \e[1;32mGood work o/ \e[0m\n";
    exit 0;
}

# == GLOBAL VARIABLES == #

# Error handling
TRAP_SIGNALS="QUIT KILL STOP";
trap 'dumper_cancel' $TRAP_SIGNALS;

# Dumper script version
version="1.0";

# receives the database/table name from the 
# command arguments inside the main function
database="";
tables="";

# Receives the script name from $0 variable
script_name="";

# Messaging Colors
GRAY="\e[1;30m";
RED="\e[0;31m";
GREEN="\e[0;32m";
BROWN="\e[0;33m";
BLUE="\e[1;34m";
END_COLOR="\e[0m";

# Run the main function :)
main $@

